Project: Universal Machine Emulator
Authors: Eric Zhao and Leo Kim

Virtual-machine code (and by extension machine code) by writing a software 
implementation of a simple virtual machine. We designed, documented, and 
implemented the UM with a clean modular structure.

To run: we built an executable named um that emulates a “Universal Machine”. 
The executable takes a single argument: the pathname for a file 
(typically with a name like some program.um) that contains machine 
instructions for the emulator to execute.

The UM has these components:
• Eight general-purpose registers holding one 32-bit word each.

• An address space that is divided into an ever-changing collection of memory segments.
  Each segment contains a sequence of words, and each is referred to by a distinct 
  32-bit identifier. The memory is segmented and word-oriented; you cannot load a byte.

• An I/O device capable of displaying ASCII characters and performing input and output 
  of unsigned 8-bit characters. The device uses stdin and stdout to implement the UM’s I/O instructions.

• A 32-bit program counter.

One distinguished segment is referred to by the 32-bit identifier 0 and stores the program. 
This segment is called the 0 segment.

To our knowledge, everything has been correctly implemented. If you have any questions,
contact eric_duan_rui.zhao@tufts.edu or ericzhao603@gmail.com.
